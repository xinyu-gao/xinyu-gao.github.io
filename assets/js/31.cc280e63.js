(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{562:function(t,a,s){"use strict";s.r(a);var e=s(2),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"bean-的作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean-的作用域"}},[t._v("#")]),t._v(" Bean 的作用域")]),t._v(" "),s("p",[t._v("Spring 框架支持 "),s("strong",[t._v("5 种")]),t._v("作用域，其中 3 种是使用基于 Web 的 "),s("strong",[t._v("ApplicationContext")]),t._v(" 时才生效的。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("作用域")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("singleton（单例）")]),t._v(" "),s("td",[t._v("默认，IoC 容器都拥有唯一的一个实例对象")])]),t._v(" "),s("tr",[s("td",[t._v("prototype（原型）")]),t._v(" "),s("td",[t._v("一个 Bean 定义，任意多个对象")])]),t._v(" "),s("tr",[s("td",[t._v("request（请求）")]),t._v(" "),s("td",[t._v("一个 HTTP 请求产生一个 Bean 对象")])]),t._v(" "),s("tr",[s("td",[t._v("session（会话）")]),t._v(" "),s("td",[t._v("限定一个 Bean 的作用域为 HTTPSession 的生命周期")])]),t._v(" "),s("tr",[s("td",[t._v("global session（全局会话）")]),t._v(" "),s("td",[t._v("限定一个 Bean 的作用域为全局 HTTPSession 的生命周期")])])])]),t._v(" "),s("div",{staticClass:"language-xml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("bean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("***"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("com.***.**"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("scope")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("singleton"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("bean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("在 bean 中用 scope 声明作用域。")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"bean-的生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean-的生命周期"}},[t._v("#")]),t._v(" Bean 的生命周期")]),t._v(" "),s("p",[t._v("在 ApplicationContext 容器中：")]),t._v(" "),s("ol",[s("li",[t._v("容器启动后，对 scope 为 singleton 且非懒加载的 bean 进行实例化。")]),t._v(" "),s("li",[t._v("按照 Bean 定义信息配置信息，注入所有的属性。")]),t._v(" "),s("li",[t._v("如果 Bean 实现了 BeanNameAware 接口，会回调该接口的 setBeanName() 方法，传入 id，此时获得了自己在配置文件中的 id。")]),t._v(" "),s("li",[t._v("如果 Bean 实现了 BeanFactory 接口，会回调该接口的 setBeanFactory() 方法，传入BeanFactory， 此时获得了自己所在的 BeanFactory。")]),t._v(" "),s("li",[t._v("如果 Bean 实现了 ApplicationContextAware 接口，会回调该接口的 setApplicationContext() 方法，传入 AplicationContext，此时获得了自己所在的 ApplicationContext。")]),t._v(" "),s("li",[t._v("如果 Bean 实现了 BeanPostProcessor 接口，就会回调该接口的 postProcesssBeforeInitialzation() 方法。")]),t._v(" "),s("li",[t._v("如果 Bean 实现了InitializingBean接口，会回调该接口的 afterPopertiesSet() 方法。")]),t._v(" "),s("li",[t._v("如果 Bean 配置了 init-method 方法，就会执行 init-method 配置的方法。")]),t._v(" "),s("li",[t._v("如果 Bean 实现了 BeanPostProcessor 接口，就会毁掉该接口的 postProcessAfterInitialization() 方法。")]),t._v(" "),s("li",[t._v("正式使用该 Bean 。生命周期交给调用方，不再由 Spring 管理。")]),t._v(" "),s("li",[t._v("容器关闭后，如果 Bean 实现了 DisposableBean 接口，就会回调该接口的 destroy() 方法。")]),t._v(" "),s("li",[t._v("如果 Bean 配置了 destroy-method 方法，就会执行 destroy-method 配置的方法，整个 Bean 的生命周期结束。")])])])}),[],!1,null,null,null);a.default=n.exports}}]);